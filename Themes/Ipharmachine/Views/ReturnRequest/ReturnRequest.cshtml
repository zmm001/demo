@model SubmitReturnRequestModel
@using Nop.Web.Models.Order;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.ReturnItems").Text);
    //page class
    Html.AppendPageCssClassParts("html-return-request-page");
    Html.AddCssFileParts("~/Themes/Ipharmachine/Content/css/pages/Customer.css");
}

<div class="account-number">
    <h1 class="account-title">
        @Html.Raw(string.Format(T("ReturnRequests.Title").Text, Url.RouteUrl("OrderDetails", new { orderId = Model.OrderId }), Model.CustomOrderNumber))
    </h1>
    <div class="container">
        @if (!String.IsNullOrEmpty(Model.Result))
        {
            <div class="result">
                @Model.Result
            </div>
        }
        else
        {
            <div class="row">
                <div class="mycol col-xs-12">
                    @using (Html.BeginForm("ReturnRequest", "ReturnRequest", FormMethod.Post, new { @class = "form-horizontal account-submit" }))
                    {
                        @Html.AntiForgeryToken()
                        <strong class="box-title">@T("ReturnRequests.SelectProduct(s)")</strong>

                        <div class="table-containter">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th class="product">
                                            @T("ReturnRequests.Products.Name")
                                        </th>
                                        <th class="unit-price">
                                            @T("ReturnRequests.Products.Price")
                                        </th>
                                        <th class="quantity">
                                            @T("ReturnRequests.Products.Quantity")
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.Items)
                                    {
                                        <tr>
                                            <td class="product">
                                                <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})">@item.ProductName</a>
                                                @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                                {
                                                    <div class="attributes">
                                                        @Html.Raw(item.AttributeInfo)
                                                    </div>
                                                }
                                            </td>
                                            <td class="unit-price">
                                                @item.UnitPrice
                                            </td>
                                            <td class="quantity">
                                                <select name="quantity@(item.Id)">
                                                    @for (int i = 0; i <= item.Quantity; i++)
                                                    {
                                                        <option value="@(i)">@(i)</option>
                                                    }
                                                </select>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <strong class="box-title">@T("ReturnRequests.WhyReturning")</strong>
                        <div class="form-container">
                            <div class="form-group">
                                @{
                                    var reasonsSelectList = Model.AvailableReturnReasons.Select(x => new SelectListItem
                                    {
                                        Text = x.Name,
                                        Value = x.Id.ToString()
                                    }).ToList();
                                }
                                <label for="@Html.IdFor(m => m.ReturnRequestReasonId)" class="col-sm-4 control-label">@Html.DisplayNameFor(m => m.ReturnRequestReasonId):</label>
                                <div class="col-sm-4">
                                    @Html.DropDownListFor(model => model.ReturnRequestReasonId, reasonsSelectList, new { @class = "form-control inputs" })
                                </div>
                            </div>

                            <div class="form-group">
                                @{
                                    var actionsSelectList = Model.AvailableReturnActions.Select(x => new SelectListItem
                                    {
                                        Text = x.Name,
                                        Value = x.Id.ToString()
                                    }).ToList();
                                }
                                <label for="@Html.IdFor(m => m.ReturnRequestActionId)" class="col-sm-4 control-label">@Html.DisplayNameFor(m => m.ReturnRequestActionId):</label>
                                <div class="col-sm-4">
                                    @Html.DropDownListFor(model => model.ReturnRequestActionId, actionsSelectList, new { @class = "form-control inputs" })
                                </div>
                            </div>

                            @if (Model.AllowFiles)
                            {
                                Html.AddCssFileParts("~/Scripts/fineuploader/fineuploader-4.2.2.min.css");
                                Html.AddScriptParts(ResourceLocation.Foot, "~/Scripts/fineuploader/jquery.fineuploader-4.2.2.min.js");
                                Html.AddScriptParts(ResourceLocation.Foot, "~/Themes/Ipharmachine/Content/js/extend/uploader.js");
                                var allowedFileExtensionsList = new List<string>();
                                allowedFileExtensionsList.Add("jpg");
                                allowedFileExtensionsList.Add("jpeg");
                                allowedFileExtensionsList.Add("png");
                                allowedFileExtensionsList.Add("bmp");
                                allowedFileExtensionsList.Add("cdr");
                                allowedFileExtensionsList.Add("pdf");
                                allowedFileExtensionsList.Add("doc");
                                allowedFileExtensionsList.Add("docx");
                                allowedFileExtensionsList.Add("xls");
                                allowedFileExtensionsList.Add("xlsx");
                                //ex. ['jpg', 'jpeg', 'jpeg', 'gif'] or []

                                var allowedFileExtensions = string.Join(",", allowedFileExtensionsList);
                                var controlId = @Html.FieldIdFor(model => model.UploadedFileGuid);
                                <div class="form-group">
                                    <label for="@Html.IdFor(m => m.UploadedFileGuid)" class="col-sm-4 control-label">@Html.DisplayNameFor(m => m.UploadedFileGuid):</label>
                                    <input id="@(controlId)" name="@(controlId)" type="hidden"
                                           data-uploader="@(controlId)uploader"
                                           data-temp="@(controlId)-qq-template"
                                           data-url="@(Url.RouteUrl("UploadFileReturnRequest"))"
                                           data-ext="@Html.Raw(allowedFileExtensions)" />
                                    <div class="col-sm-4">
                                        <div id="@(controlId)uploader" class="uploadedfileinput"></div>
                                        @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                                        <script type="text/template" id="@(controlId)-qq-template">
                                            <div class="qq-uploader-selector qq-uploader">
                                                <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                                    <span>@T("Common.FileUploader.DropFiles")</span>
                                                </div>
                                                <div class="qq-upload-button-selector qq-upload-button">
                                                    <div>@T("Common.FileUploader.Upload")</div>
                                                </div>
                                                <span class="qq-drop-processing-selector qq-drop-processing">
                                                    <span>@T("Common.FileUploader.Processing")</span>
                                                    <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                                                </span>
                                                <ul class="qq-upload-list-selector qq-upload-list">
                                                    <li>
                                                        <div class="qq-progress-bar-container-selector">
                                                            <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                                        </div>
                                                        <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                                        <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                                        <span class="qq-upload-file-selector qq-upload-file"></span>
                                                        <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                                        <span class="qq-upload-size-selector qq-upload-size"></span>
                                                        <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                                        <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                                        <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                                        <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                                    </li>
                                                </ul>
                                            </div>
                                        </script>
                                    </div>
                                </div>
                            }
                            <div class="form-group">

                                <label for="@Html.IdFor(m => m.Comments)" class="col-sm-4 control-label">@Html.DisplayNameFor(m => m.Comments):</label>
                                <div class="col-sm-4">
                                    @Html.TextAreaFor(model => model.Comments, new { @class = "form-control inputs" })
                                </div>
                            </div>

                            <input type="submit" name="submit-return-request" class="buttons" value="@T("ReturnRequests.Submit")" />

                        </div>

                                    }
                </div>
            </div>
                                    }
    </div>

</div>
