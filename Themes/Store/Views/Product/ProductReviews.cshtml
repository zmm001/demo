@model ProductReviewsModel
@using Nop.Web.Models.Catalog;
@{
    Layout = "";
    //title

}
<div class="detail-review account-number form-horizontal" id="review-box">


    @if (Model.Items.Count > 0)
    {
        <h4 class="review-box-title">@T("reviews.overview.reviews") </h4>
        <div class="review-box-wrapper" id="review-content" data-url="@(Url.RouteUrl("SetProductReviewHelpfulness"))">
            @Html.Widget("productreviews_page_top", Model.ProductId)
            @foreach (var review in Model.Items)
            {
                int ratingPercent = review.Rating * 20;
            <div class="product-review-item">
                <div class="review-item-head">
                    <div class="review-title">
                        <strong>@review.Title</strong>
                    </div>
                    <div class="product-review-box">
                        <div class="rating">
                            <div style="width: @(ratingPercent)%">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="review-content">
                    <div class="review-text">
                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                    </div>
                    <div class="review-info">
                        <span class="user">
                            <label>@T("Reviews.From"):</label>
                            @if (review.AllowViewingProfiles)
                                {
                                <a href="@Url.RouteUrl("CustomerProfile", new {id = review.CustomerId})">@(review.CustomerName)</a>
                                }
                                else
                                {
                                @review.CustomerName
                                }
                        </span>
                        <span class="separator">|</span>
                        <span class="date">
                            <label>@T("Reviews.Date"):</label>
                            <span>@review.WrittenOnStr</span>
                        </span>
                    </div>
                    @Html.Partial("_ProductReviewHelpfulness", review.Helpfulness, new ViewDataDictionary())
                    @Html.Widget("productreviews_page_inside_review", review.Id)
                    @if (!String.IsNullOrEmpty(review.ReplyText))
                        {
                        <div class="reply">
                            <div class="reply-header">
                                @T("Reviews.Reply")
                            </div>
                            <div class="reply-text">
                                @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReplyText, false, true, false, true, false, true))
                            </div>
                        </div>
                        }
                </div>
            </div>
            }
        </div>

    }
    @if (Model.AddProductReview.SuccessfullyAdded)
    {
        <div class="result no-repost">
            @Model.AddProductReview.Result
        </div>
    }
    else
    {
        <form action="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })#review-box" method="post" novalidate="novalidate">

            <h4 class="review-box-title">@T("reviews.Write") </h4>
            <div class="write-review form-container" id="review-form">
                @Html.AntiForgeryToken()
                @{
                    var validationSummary = Html.ValidationSummary(true);
                    if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                    {
                        <div class="message-error no-repost">@validationSummary</div>
                    }
                }
                <div class="form-group">
                    <label for="@Html.IdFor(m=>m.AddProductReview.Title)" class="col-sm-4 control-label">@Html.RequiredHint() @Html.DisplayNameFor(m => m.AddProductReview.Title):</label>
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.AddProductReview.Title, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-title form-control inputs" }) : (object)(new { @class = "review-title form-control inputs", disabled = "disabled" }))
                        <div class="error tips">@Html.ValidationMessageFor(model => model.AddProductReview.Title)</div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="@Html.IdFor(m=>m.AddProductReview.ReviewText)" class="col-sm-4 control-label">@Html.RequiredHint() @Html.DisplayNameFor(m => m.AddProductReview.ReviewText):</label>
                    <div class="col-sm-4">
                        @Html.TextAreaFor(model => model.AddProductReview.ReviewText, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-text form-control inputs" }) : (object)(new { @class = "review-text form-control inputs", disabled = "disabled" }))
                        <div class="error tips">@Html.ValidationMessageFor(model => model.AddProductReview.ReviewText)</div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.AddProductReview.Rating, new { @class = "col-sm-4 control-label" }, ":")
                    <div class="col-sm-8 radio-inner">
                        <label class="radio-inline first">@T("Reviews.Fields.Rating.Bad")</label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "1", new { id = "addproductrating_1" })
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "2", new { id = "addproductrating_2" })
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "3", new { id = "addproductrating_3" })
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "4", new { id = "addproductrating_4" })
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "5", new { id = "addproductrating_5" })
                        </label>
                        <label class="radio-inline last">@T("Reviews.Fields.Rating.Excellent")</label>
                    </div>
                </div>
                @if (Model.AddProductReview.DisplayCaptcha)
                {
            <div class="form-group">
                <div class="captcha-box col-sm-8 col-sm-push-4">
                    @Html.Raw(Html.GenerateCaptcha())
                </div>
            </div>
                }
                <input type="submit" name="add-review" class="buttons" value="@T("Reviews.SubmitButton")" />

            </div>

        </form>
                    }
    @Html.Widget("productreviews_page_bottom", Model.ProductId)
</div>
